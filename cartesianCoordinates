<!DOCTYPE html>
<html>
<head>
<title>Gravity</title>
<style>
body {
    background: #000000;
    color: #FFFFFF;
}
canvas {
    border: 3px #FFFFFF solid;
}
table {
    border: 1px #FFFFFF solid;
    width: 100%;
}
</style>
</head>
<body>
<center>
<h1>Gravity</h1>
Zoom: <input type="text" id="scaleMultiplier">
<input type="button" id="pause" value="Pause">
<input type="button" id="play" value="Play">
<div></div>
<canvas id="canvas" width="1000" height="625"></canvas>
</center>
<script>

var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');
var objects = new Array();

// Simulation settings:
var runSpeed = 5;   		// Nummber of milliseconds between each iteration.
var hyperSpeed = 3; 		// How many times to run simulation per iteration.			WARNING: High values lead to lag.
var hyperRender = true;		// True: render each iteration, False: render each loop. 	ONLY WORKS with hyperWarp on and at regular runSpeed (aka slower).
var timeStep = 8e-2;			// Nummerical time step size, which passes each loop.
var scaleFactor;			// Multiplied by data in rendering to adjust zoom level.
var path = true;  			// Draw path
var collision = false;

var renderId = -1; 			// ID of Thing to put at center of frame.

// Global variables:
var G;
var N;
var scaleDefault;
var width = canvas.width;
var height = canvas.height;
var run;
var running = true;
var zoom = 1;

// Main program:
main();

function main()
{
    stableySystem(); 				// Initialize begin conditions.
	N = objects.length;				// This value is often calculated for loops, calculating it once should reduce the number of calculations.
	scaleEstimate(); 				// Estimate default scale by longest distance to origin.
	context.fillStyle = "black";
	context.fillRect(0, 0, width, height);
	
	document.getElementById('scaleMultiplier').onchange = function() // Detecting entered value in zoom field.
	{
		var scaleMultiply = parseFloat(document.getElementById('scaleMultiplier').value);
		if (!isNaN(scaleMultiply) && scaleMultiply > 0) // Checking if it is a (positive) number.
		{
			zoom = scaleMultiply / zoom;
			scaleFactor = scaleDefault * scaleMultiply; // Scale the default scale factor by entered value. 
			//context.clearRect(0, 0, width, height); 	// Clear canvas to remove old path ar old scale (I haven't been able to scale this as well).
			context.drawImage(canvas, (1 - zoom) * width/2, (1 - zoom) * height/2, width * zoom, height * zoom);
			if (zoom < 1) 
			{
				context.fillStyle = "black";
				context.fillRect(0, 0, (1 - zoom) * width/2, height);
				context.fillRect((1 + zoom) * width/2, 0, (1 - zoom) * width/2, height);
				context.fillRect(0, 0, width, (1 - zoom) * height/2);
				context.fillRect(0, (1 + zoom) * height/2, width, (1 - zoom) * height/2);
			}
			render();
		}
	};
	
	run = setInterval('loop()',runSpeed);
	
	document.getElementById('pause').onclick = function() // Detecting clicking on pause button.
	{
		if(running)
		{
			run = clearInterval(run); 				// Stop simulation.
			running = false;
		}
	};
	document.getElementById('play').onclick = function() // Detecting clicking on play button.
	{
		if(!running)
			{
				run = setInterval('loop()',runSpeed); // Restart simulation.
				running = true;
			}
	};
}

// Functions:
function scaleEstimate()
{
	var maxDistance = 0;
	for (var i = 0; i < N; ++i)
	{
		var D = objects[i].x * objects[i].x + objects[i].y * objects[i].y;
		if (D > maxDistance) maxDistance = D;
	}
	scaleDefault = 0.4875 * height / Math.sqrt(maxDistance);
	scaleFactor = scaleDefault;
}

function loop()
{
	if (!hyperRender) render("rgba(0, 0, 0, 0.8)");
    for (var i = 0; i < hyperSpeed; ++i)
	{
		if (hyperRender) render("rgba(0, 0, 0, 0.8)");
		gravityPhysics();
		updatePosition();
		if (hyperRender) render();
	}
	if (!hyperRender) render();
}

function Thing(m, x, y, Vx, Vy, radius, color)
{
    this.m = timeStep * timeStep * G * m; 	// Constant parameter of accelation.
    this.rad = radius ? radius : Math.sqrt(m)/2; // Radius of object.
    if (this.rad < 1) this.rad = 1;
    this.x = x; 							// Position
    this.y = y;
    this.Vx = timeStep * Vx; 				// Scaled velocity with nummerical time step.
    this.Vy = timeStep * Vy;
    this.fill = color ? color : '#FFFFFF'; 	// Render color of object, when undefined it is set to white.
    this.fixed = false; 					// If true it can not move, but does applies forces on other objects.
}

function gravityPhysics()
{
    for (var i = 0; i < N - 1; ++i)
    {
        for (var j = i + 1; j < N; ++j)
        {
            var Dx = objects[j].x - objects[i].x;    // Difference in X direction between objects[i] and objects[j].
            var Dy = objects[j].y - objects[i].y;    // Difference in Y direction between objects[i] and objects[j].
            var D2 = Dx * Dx + Dy * Dy;              // Distance between objects[i] and objects[j] squared.
			
			if (D2 <= (objects[i].rad + objects[j].rad) * (objects[i].rad + objects[j].rad) && collision)										// Colision check could be inserted here, reusing D2.
			{
				var delta = 2 * (Dx * (objects[i].Vx - objects[j].Vx) + Dy * (objects[i].Vy - objects[j].Vy)) / (D2 * (objects[i].m + objects[j].m));
				objects[i].Vx += -objects[i].m * delta * Dx;
				objects[i].Vy += -objects[i].m * delta * Dy;
				objects[j].Vx +=  objects[j].m * delta * Dx;
				objects[j].Vy +=  objects[j].m * delta * Dy;
			}
			else
			{
				var Rdiv = 1 / (D2 * Math.sqrt(D2));
				objects[i].Vx +=  objects[j].m * Rdiv * Dx;
				objects[i].Vy +=  objects[j].m * Rdiv * Dy;
				objects[j].Vx += -objects[i].m * Rdiv * Dx;
				objects[j].Vy += -objects[i].m * Rdiv * Dy;
			}
        }
    }
}

function updatePosition()
{
	for (var i = 0; i < N; ++i)
	{
		if (!objects[i].fixed)
		{
			//if (objects[i].x * scaleFactor >  width/2 ) objects[i].Vx = -Math.abs(objects[i].Vx);
			//if (objects[i].x * scaleFactor < -width/2 ) objects[i].Vx =  Math.abs(objects[i].Vx);
			//if (objects[i].y * scaleFactor >  height/2) objects[i].Vy = -Math.abs(objects[i].Vy);
			//if (objects[i].y * scaleFactor < -height/2) objects[i].Vy =  Math.abs(objects[i].Vy);
			objects[i].x += objects[i].Vx; 		// Add scaled velocity to position.
			objects[i].y += objects[i].Vy;
		}
	}
}

function render(color)
{
    if (!path) context.clearRect(0, 0, width, height);
    for (var i = 0; i < N; ++i)
    {
        context.beginPath();
        var radius = objects[i].rad * scaleFactor * scaleFactor;
        if (radius < 1) radius = 1;
		if (renderId == -1)
		{
			context.arc(objects[i].x * scaleFactor + canvas.clientWidth/2, objects[i].y * scaleFactor + canvas.clientHeight/2, radius, 0, 2 * Math.PI, false);
		}
		else
		{
			context.arc((objects[i].x - objects[renderId].x) * scaleFactor + canvas.clientWidth/2, 
						(objects[i].y - objects[renderId].y) * scaleFactor + canvas.clientHeight/2, radius, 0, 2 * Math.PI, false);
		}
        context.fillStyle = color ? color : objects[i].fill;
        context.fill();
    }
}

// Initialization:
function stableySystem()
{
	G = 10;
    objects[0] = new Thing(100, 0 , 0, 0, 0, false, 'yellow');
    objects[0].fixed = true;
    objects[1] = new Thing(10, 50, 0, 0, -4, false, 'green');
    objects[2] = new Thing(0.005, 180, 0, 0, 2.32, false, '#6A6A87');
    objects[3] = new Thing(26, 400, 0, 0, -1.5, false, 'red');
    objects[4] = new Thing(0.01, 420, 0, 0, -4, false, 'blue');
}

function scaledSystem()
{
    G = 10;
    objects[0] = new Thing(1000, 0, 0, 0, 0, 'yellow');
    objects[0].fixed = true;
    objects[1] = new Thing(100, 500, 0, 0, -4, 'green');
    objects[2] = new Thing(0.05, 1800, 0, 0, 2.32, '#6A6A87');
    objects[3] = new Thing(260, 4000, 0, 0, -1.5, 'red');
    objects[4] = new Thing(0.1, 4200, 0, 0, -4, 'blue');
}

function moonsSystem()
{
	G = 6.67384e-11;
    objects[0] = new Thing(1.9891e30,0,0,0,-16.0116812,"yellow");           // Sun
    objects[1] = new Thing(3.3020e23,57.909175e9,0,0,47.8725e3,"#6A6A87");  // Mercury
    objects[2] = new Thing(4.8690e24,108.208930e9,0,0,35.0214e3,"#FDF4A6"); // Venus
    objects[3] = new Thing(5.9742e24,149.597890e9,0,0,29.7859e3,"#1B70E7"); // Earth
	objects[4] = new Thing(6.4191e23,227.936640e9,0,0,24.1309e3,"#FC5F10"); // Mars
	objects[5] = new Thing(7.3477e22,149.982289e9,0,0,30.8079e3,"#EDE7C0"); // Moon
	objects[6] = new Thing(1.0720e16,227.946017e9,0,0,26.2689e3,"#1B70E7"); // Phobos
	objects[7] = new Thing(1.4800e15,227.960100e9,0,0,25.4809e3,"#B28C7A"); // Deimos
}

function planetsSystem()
{
	G = 6.67384e-11;
    objects[0] = new Thing(1.9891e30,0,0,0,-16.0116812,"yellow");           // Sun
    objects[1] = new Thing(3.302e23,57.909175e9,0,0,47.8725e3,"#6A6A87");   // Mercury
    objects[2] = new Thing(4.8690e24,108.208930e9,0,0,35.0214e3,"#FDF4A6"); // Venus
    objects[3] = new Thing(5.9742e24,149.597890e9,0,0,29.7859e3,"#1B70E7"); // Earth
	objects[4] = new Thing(6.4191e23,227.936640e9,0,0,24.1309e3,"#FC5F10"); // Mars
	objects[5] = new Thing(1.8987e27,778.412010e9,0,0,13.0697e3,"#D38740"); // Jupiter
	objects[6] = new Thing(5.6851e26,1426.725400e9,0,0,9.6724e3,"#F6D053"); // Saturn
	objects[7] = new Thing(8.6849e25,2870.972200e9,0,0,6.8352e3,"#18E5F0"); // Uranus
	objects[8] = new Thing(1.0244e26,4498.252900e9,0,0,5.4778e3,"#036BE2"); // Neptune
}

function collideSystem()
{
	G = 6.67384e-11;
    objects[0] = new Thing(1e30,0,1e10,5e4,-5e4,1e9,"red");
    objects[1] = new Thing(1e30,5e10,0,0,0,1e9,"green");
    objects[2] = new Thing(1e30,-5e10,0,0,0,1e9,"blue");
	objects[3] = new Thing(1e30,0,-1e10,-5e4,5e4,1e9,"yellow");
}

</script>
</body>
</html>
